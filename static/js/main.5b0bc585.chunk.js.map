{"version":3,"sources":["FormComponent.js","FormContainer.js","App.js","serviceWorker.js","index.js"],"names":["FormComponent","props","className","onSubmit","submitForm","style","display","marginLeft","marginBottom","type","name","placeholder","value","data","firstName","onChange","handleClick","lastName","age","checked","gender","location","isVegan","isKosher","isLactoseFree","FormContainer","state","bind","e","target","this","setState","text","window","alert","slice","React","Component","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5b0bc585.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction FormComponent(props) {\r\n    return(\r\n        <main>\r\n            <div className=\"description\">\r\n                <p>As the user enters data into the inputs fields, the app uses event handling and data binding to continually update the state with the input value.</p>\r\n                <p>On submittal, the input values are retrieved from the state properties and displayed in a window alert. </p>\r\n            </div>\r\n            <form onSubmit={props.submitForm}>\r\n                <span style={{display: 'block', marginLeft: 5, marginBottom: 10}}>Please input your travel information:</span>\r\n                <input \r\n                    type=\"text\"\r\n                    name=\"firstName\"\r\n                    placeholder=\"First Name\" \r\n                    value={props.data.firstName}\r\n                    onChange={props.handleClick}\r\n                /><br/>\r\n\r\n                <input \r\n                    type=\"text\"\r\n                    name=\"lastName\"\r\n                    placeholder=\"Last Name\" \r\n                    value={props.data.lastName}\r\n                    onChange={props.handleClick}\r\n                /><br/>\r\n\r\n                <input \r\n                    type=\"number\"\r\n                    name=\"age\"\r\n                    placeholder=\"Age\" \r\n                    value={props.data.age}\r\n                    onChange={props.handleClick}\r\n                /><br/>\r\n\r\n                <div className=\"txt\">Gender:</div>\r\n                <label>\r\n                    <input\r\n                    type=\"radio\"\r\n                    name=\"gender\"\r\n                    value=\"male\"\r\n                    checked={props.data.gender === \"male\"}\r\n                    onChange={props.handleClick}\r\n                    />Male\r\n                </label>\r\n\r\n                <label>\r\n                    <input\r\n                    type=\"radio\"\r\n                    name=\"gender\"\r\n                    value=\"female\"\r\n                    checked={props.data.gender === \"female\"}\r\n                    onChange={props.handleClick}\r\n                    />Female\r\n                </label><br/>\r\n\r\n                <label><div className=\"txt\">Destination:</div>\r\n                    <select\r\n                    name=\"location\"\r\n                    value={props.data.location}\r\n                    onChange={props.handleClick}\r\n                    >\r\n                    <option value=\"\">Select a Destination</option>\r\n                    <option value=\"Cancun\">Cancun</option>\r\n                    <option value=\"Cozumel\">Cozumel</option>\r\n                    <option value=\"Roatan\">Roatan</option>\r\n                    <option value=\"Belize City\">Belize City</option>\r\n                    </select><br/>\r\n                </label>\r\n\r\n                <div className=\"txt\">Dietary Restrictions:</div>\r\n                <label>Vegetarian\r\n                    <input  \r\n                    type=\"checkbox\"\r\n                    name=\"isVegan\"\r\n                    checked={props.data.isVegan}\r\n                    onChange={props.handleClick}\r\n                    />\r\n                </label>\r\n\r\n                <label>Kosher\r\n                    <input  \r\n                    type=\"checkbox\"\r\n                    name=\"isKosher\"\r\n                    checked={props.data.isKosher}\r\n                    onChange={props.handleClick}\r\n                    />\r\n                </label>\r\n\r\n                <label>Lactose Free\r\n                    <input  \r\n                    type=\"checkbox\"\r\n                    name=\"isLactoseFree\"\r\n                    checked={props.data.isLactoseFree}\r\n                    onChange={props.handleClick}\r\n                    />\r\n                </label>\r\n\r\n                <button>Submit</button>\r\n            </form>\r\n        </main>\r\n    )\r\n}\r\n\r\nexport default FormComponent;","import React from 'react';\r\nimport FormComponent from './FormComponent';\r\n\r\nclass FormContainer extends React.Component {\r\n\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      firstName: \"\",\r\n      lastName: \"\",\r\n      age: \"\",\r\n      gender: \"\",\r\n      location: \"\",\r\n      isVegan: false,\r\n      isKosher: false,\r\n      isLactoseFree: false\r\n    }\r\n    this.handleClick = this.handleClick.bind(this)\r\n    this.submitForm = this.submitForm.bind(this)\r\n  }\r\n\r\n  handleClick(e) {\r\n    var name = e.target.name;\r\n    var type = e.target.type;\r\n    var value = e.target.value;\r\n    var checked = e.target.checked;\r\n    if (type === \"checkbox\") { // for checkboxes, set state property equal to true or false\r\n        this.setState({\r\n          [name]: checked\r\n        })\r\n    }\r\n    else { // for all other input types, set state property equal to input value\r\n      this.setState({\r\n        [name]: value\r\n      })\r\n    }\r\n  }\r\n\r\n  submitForm() {\r\n    var text = \"\";\r\n    if (this.state.isVegan) {\r\n      text += \" Vegan,\"\r\n    }\r\n    if (this.state.isKosher) {\r\n      text += \" Kosher,\"\r\n    }\r\n    if (this.state.isLactoseFree) {\r\n      text += \" Lactose Free,\"\r\n    }\r\n    if (!this.state.isVegan && !this.state.isKosher && !this.state.isLactoseFree) {\r\n      text = \"No Dietary Restrictions\"\r\n    }\r\n    window.alert(\r\n      \"First Name: \" + this.state.firstName + \"\\n\" + \r\n      \"Last Name: \" + this.state.lastName + \"\\n\" +\r\n      \"Age: \" + this.state.age + \"\\n\" +\r\n      \"Gender: \" + this.state.gender + \"\\n\" +\r\n      \"Destination: \" + this.state.location + \"\\n\" +\r\n      \"Dietary Restrictions: \" + text.slice(0, -1)\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <FormComponent\r\n        handleClick = {this.handleClick}\r\n        submitForm = {this.submitForm}\r\n        data = {this.state}\r\n      />\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default FormContainer;\r\n","import React from 'react';\nimport FormContainer from './FormContainer';\nimport './App.css';\n\nfunction App() {\n  return(\n    <FormContainer />\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}